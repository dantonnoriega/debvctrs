% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/arithmetic.R
\name{arithmetic}
\alias{arithmetic}
\alias{vec_arith.deb_lsd}
\alias{vec_arith.deb_lsd.default}
\alias{vec_arith.deb_lsd.deb_lsd}
\alias{vec_arith.deb_lsd.numeric}
\alias{vec_arith.numeric.deb_lsd}
\alias{vec_arith.deb_lsd.MISSING}
\alias{vec_arith.deb_decimal}
\alias{vec_arith.deb_decimal.default}
\alias{vec_arith.deb_decimal.deb_decimal}
\alias{vec_arith.deb_decimal.numeric}
\alias{vec_arith.numeric.deb_decimal}
\alias{vec_arith.deb_decimal.MISSING}
\alias{vec_arith.deb_lsd.deb_decimal}
\alias{vec_arith.deb_decimal.deb_lsd}
\title{Arithmetic operations with deb_lsd and deb_decimal}
\usage{
\method{vec_arith}{deb_lsd}(op, x, y)

\method{vec_arith.deb_lsd}{default}(op, x, y)

\method{vec_arith.deb_lsd}{deb_lsd}(op, x, y)

\method{vec_arith.deb_lsd}{numeric}(op, x, y)

\method{vec_arith.numeric}{deb_lsd}(op, x, y)

\method{vec_arith.deb_lsd}{MISSING}(op, x, y)

\method{vec_arith}{deb_decimal}(op, x, y)

\method{vec_arith.deb_decimal}{default}(op, x, y)

\method{vec_arith.deb_decimal}{deb_decimal}(op, x, y)

\method{vec_arith.deb_decimal}{numeric}(op, x, y)

\method{vec_arith.numeric}{deb_decimal}(op, x, y)

\method{vec_arith.deb_decimal}{MISSING}(op, x, y)

\method{vec_arith.deb_lsd}{deb_decimal}(op, x, y)

\method{vec_arith.deb_decimal}{deb_lsd}(op, x, y)
}
\arguments{
\item{op}{Used internally to enable debkeepr to work with vctrs.}

\item{x, y}{A pair of vectors.}
}
\description{
Implementation of arithmetic operations for pounds, shillings, and pence
values as \code{deb_lsd} and \code{deb_decimal} vectors. Available operations are:
}
\details{
\itemize{
\item \code{deb_lsd} and \code{deb_lsd}: \code{+}, \code{-}, and \code{/}. The first two return a
\code{deb_lsd} vector; the last returns a numeric vector.
\item \code{deb_lsd} and \code{numeric}: \code{\*} and \code{/}. Both return a \code{deb_lsd} vector.
\item \code{numeric} and \code{deb_lsd}: \code{\*}, returning a \code{deb_lsd} vector.
\item \code{deb_decimal} and \code{deb_decimal}: \code{+}, \code{-}, and \code{/}. The first two
return a \code{deb_lsd} vector; the last returns a numeric vector.
\item \code{deb_decimal} and \code{numeric}: \code{+}, \code{-}, \code{/}, \code{\*}, \code{^}, \code{\%\%}, \code{\%/\%}.
All return a \code{deb_decimal} vector.
\item \code{numeric} and \code{deb_decimal}: \code{+}, \code{-}, \code{\*}. All return a
\code{deb_decimal} vector.
\item \code{deb_lsd} and \code{deb_decimal}: \code{+}, \code{-}, \code{/}. The first two return a
\code{deb_lsd} vector; the last returns a numeric vector.
\item \code{deb_decimal} and \code{deb_lsd}: \code{+}, \code{-}, \code{/}. The first two return a
\code{deb_lsd} vector; the last returns a numeric vector.
}
}
\examples{

# Arithmetic with deb_lsd
lsd1 <- deb_lsd(5, 16, 6)
lsd2 <- deb_lsd(7, 6, 8)

lsd1 + lsd2
lsd2 - lsd1
# Find the ration between two values
lsd2 / lsd1

# Works with deb_lsd and numeric values
lsd2 / 2
2 * lsd1

# Arithmetic with deb_decimal
dec1 <- deb_decimal(8.45)
dec2 <- deb_decimal(4.625)

dec1 + dec2
dec1 - dec2

# Works with deb_decimal and numeric values
dec1 + dec2 + 7/3 + 8.25
dec1 / 2
2 * dec2

# deb_lsd and deb_decimal returns a deb_lsd
# except with division

lsd1 + dec1
dec1 - lsd2

# When combing two deb-style vectors, the bases must match

\dontrun{
lsd1 + deb_lsd(5, 8, 3, bases = c(60, 16))
dec1 - deb_decimal(3.25, bases = c(60, 16))
}

# When combining two `deb_decimal` vectors, the units must match

\dontrun{
dec1 + deb_decimal(23.25, unit = "s")
}

}
